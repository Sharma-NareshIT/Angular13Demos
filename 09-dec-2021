TypeScript Architecture
- Core Compiler
- Standalone Compiler
- Language Service
- VS Shim
- Managed Language Service
- TS Server

Setup Environment for TypeScript
- Download and Install Node.js - NPM
- Download and Install TypeScript 

  C:\> npm install  -g  typescript

- Download and Install Visual Studio Code

Create a new Project
-----------------------------
1. Create a new folder for project
	
	E:\TypeScript-Project

2. Open your project folder in "VS Code"

3. Open Terminal in VS Code

     E:\TypeScript-Project> npm  init -y

4. This will generate "package.json"

Note:  Package.json  comprises of meta data.


5. Add project folders
	- public	 : comprises of static resources like html, images
	- src	 : comprises of dynamic resources like .js, .ts, .css


6. Add Index page into public folder
	"index.html"

Note: Inorder to test your project, you need a web server.
         Download and Install "Live Server" extention for Visual Studio Code

7. Right Click in the index.html page

	"Open With Live Server"


TypeScript in Web Application
=======================
1. Every typescript file must have the extension  ".ts"
2. Go to "src" folder and add a new file
	      "index.ts"
  function bodyload(){
    let username:string = prompt("Enter User Name");
    document.querySelector("p").innerHTML = `Hello ! ${username}`;
}

3. Open file location in your terminal and trans compiler

       E:\TypeScript-Project\src> tsc   index.ts

4. This will generate "index.js", which you have to link to HTML page.

		  "Index.html"
<!DOCTYPE html>
<html>
    <head>
        <title>Index</title>
        <script src="../src/index.js"></script>
    </head>
    <body onload="bodyload()">
        <h1>Web Application</h1>
        <p></p>
    </body>
</html>

TypeScript in Console Mode
=====================
1. Write a type script program

	demo.ts

      let username:string = "John";
      console.log(`Hello ! ${username} welcome to TypeScript`);

2. Transcompile
	
	>tsc  demo.ts

3. Run JavaScript file
	
	>node demo.js


	          TypeScript Language Basics
1. Variables
2. Data Types
3. Operators
4. Statements
5. Functions


Variables in TypeScript
-------------------------------
- Variables are storage locations in memory where you can store a value and use it as a part of any expression.
- TypeScript variables are same as JavaScript
- Variables are declared by using
	a) var
	b) let
	c) const

var
- It defines function scope
- allows declaring, intialization, assignment
- allows shadowing
- allows hoisting

let 
- It is block scope variable
- allows declaring, initialization, assignment
- not allow shadowing
- not allow hoisting

const
- It is block scope variable
- allows only initialization.
- not allow declaring, assignment
- not allow shadowing
- not allow hositing


Data Types in TypeScript
===================
- TypeScript is strongly typed language
- Variable need the data type to define.


	let  variableName:dataType = value;

- DataType are classified into 2 types

	a) Primitive Types
	b) Non Primitive Types


Primitive Types
============
1. number
	- signed
	- unsigned
	- float
	- double
	- decimal
	- exponent
	- binary
	- hexa
	- octa
2. string
	" "
	'  '
	` `                `${ }`
3. boolean
	true / false  [not 1 or 0]
4. null
5. undefined

Note: TypeScript supports "union" of type.

Syntax:
	   let  variableName: string | number | boolean ;



Non-Primitive Types
===============
1. Array
2. Object
3. Map





